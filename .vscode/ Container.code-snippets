{
  // Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "Create Container Component": {
    "scope": "typescriptreact",
    "prefix": "createcontainer",
    "body": [
      "import React from \"react\";",
      "import { View } from \"react-native\";",
      "import { connect } from \"react-redux\";",
      "import { RootState } from \"src/typings/RootState\";",
      "",
      "type Props = ReduxProps & DispatchProps;",
      "",
      "const $0: React.FunctionComponent<Props> = props => {",
      "  return <View />;",
      "};",
      "",
      "const mapStateToProps = (state: RootState) => {",
      "    return {}",
      "};",
      "",
      "type ReduxProps = ReturnType<typeof mapStateToProps>;",
      "",
      "const mapDispatchToProps = {",
      "",
      "};",
      "",
      "type DispatchProps = typeof mapDispatchToProps;",
      "",
      "const ConnectedContainer = connect(",
      "  mapStateToProps,",
      "  mapDispatchToProps",
      ")($0);",
      "",
      "export default class extends React.Component {",
      "  render() {",
      "    return <ConnectedContainer />;",
      "  }",
      "}"
    ],
    "description": "Create Container"
  }
}
